# This is a basic workflow to help you get started with Actions

name: Quick Start Pipeline Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  iglu-variable-prep:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Clone Quickstart Repo
        if: steps.cache-action.outputs.cache-hit != 'true'
        run: git clone https://github.com/snowplow/quickstart-examples.git ~/quickstart-examples

      - name: Verify we have our cached file
        run: ls ~/quickstart-examples
      # Runs a set of commands using the runners shell
      - name: Patching Iglu Vars File
        run: |
            bash -x ./scripts/patch_iglu_vars.sh
            echo "Terraform files have been patched with ENV Vars"
            cat ~/quickstart-examples/terraform/aws/iglu_server/default/terraform.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          PREFIX: ${{secrets.PREFIX}}
          VPC_ID: ${{secrets.VPC_ID}}
          PUBLIC_SUBNET_1: ${{secrets.PUBLIC_SUBNET_1}}
          PUBLIC_SUBNET_2: ${{secrets.PUBLIC_SUBNET_2}}
          ALLOWED_IP: ${{secrets.ALLOWED_IP}}
          SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
          IGLU_DB_PASSWORD: ${{secrets.IGLU_DB_PASSWORD}}
          IGLU_API_KEY: ${{secrets.IGLU_API_KEY}}
          IAM_PERMISSIONS_BOUNDRY: ${{secrets.IAM_PERMISSIONS_BOUNDRY}}

      - name: Patching Terraform Versions File
        run : |
            cp terraform_files/iglu/versions.tf ~/quickstart-examples/terraform/aws/iglu_server/default/versions.tf
            cat ~/quickstart-examples/terraform/aws/iglu_server/default/versions.tf
            echo "Terraform version file has been patched to save state to S3"


      - uses: actions/upload-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

  # This workflow contains a single job called "build"
  iglu-server-deployment:
    needs: iglu-file-patching
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.0.0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: actions/download-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

      - name: Deploying the Terraform Stack
        run : |
            cd ~/quickstart-examples/terraform/aws/iglu_server/default
            echo "My current workspace is : $(pwd)" 
            echo "Lets Deploy the Server"
            terraform init
            terraform apply -auto-approve

      - name: Storing Terraform
        run : |
            mkdir ~/quickstart-examples/terraform_outputs
            cd ~/quickstart-examples/terraform/aws/iglu_server/default
            echo $(terraform output iglu_server_dns_name) > ~/quickstart-examples/terraform_outputs/iglu_server.txt
            cat ~/quickstart-examples/terraform_outputs/iglu_server.txt

      - uses: actions/upload-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

  # This workflow contains a single job called "build"
  iglu-server-seeding:
    needs: iglu-server-deployment
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: openjdk:oraclelinux8

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

      - name: Install utils
        run: |
          microdnf install -y tar unzip java wget git

      - name: Install IgluCLI
        run: |
          wget https://github.com/snowplow-incubator/igluctl/releases/download/0.8.1/igluctl_0.8.1.zip
          unzip igluctl_0.8.1.zip
          chmod +x igluctl
          cp igluctl /usr/local/bin/
          igluctl --version    

      - name: Seed Iglu Server 
        run: |
            git clone https://github.com/snowplow/iglu-central ~/quickstart-examples/iglu-central
            cd ~/quickstart-examples/iglu-central
            export IGLU_URL=$(cat ~/quickstart-examples/terraform_outputs/iglu_server.txt| sed 's/"//g')
            igluctl static push --public schemas/ http://$IGLU_URL ${{secrets.IGLU_API_KEY}}

      - uses: actions/upload-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/






  pipeline-variable-prep:
    needs: iglu-server-deployment  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: actions/download-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

      - name: Patching Pipeline Vars File
        run: |
            bash -x ./scripts/patch_pipeline_vars.sh
            echo "Terraform files have been patched with ENV Vars"
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          PREFIX: ${{secrets.PREFIX}}
          VPC_ID: ${{secrets.VPC_ID}}
          PUBLIC_SUBNET_1: ${{secrets.PUBLIC_SUBNET_1}}
          PUBLIC_SUBNET_2: ${{secrets.PUBLIC_SUBNET_2}}
          ALLOWED_IP: ${{secrets.ALLOWED_IP}}
          SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
          S3_DATA_BUCKET: ${{secrets.S3_DATA_BUCKET}}
          IGLU_DB_PASSWORD: ${{secrets.IGLU_DB_PASSWORD}}
          IGLU_API_KEY: ${{secrets.IGLU_API_KEY}}
          IAM_PERMISSIONS_BOUNDRY: ${{secrets.IAM_PERMISSIONS_BOUNDRY}}


      - name: Patching Terraform Versions File
        run : |
            cp terraform_files/iglu/versions.tf ~/quickstart-examples/terraform/aws/pipeline/default/versions.tf
            cat ~/quickstart-examples/terraform/aws/pipeline/default/versions.tf
            echo "Terraform version file has been patched to allow save state to S3"


      - uses: actions/upload-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

  # This workflow contains a single job called "build"
  pipeline_deployment:
    needs: iglu_file_patching
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.0.0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: actions/download-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/

      - run: ls ~/quickstart-examples

      - name: Deploying the Terraform Stack
        run : |
            cd ~/quickstart-examples/terraform/aws/iglu_server/default
            echo "My current workspace is : $(pwd)" 
            echo "Lets Deploy the Server"
            terraform init
            terraform apply -auto-approve

      - name: Storing Terraform
        run : |
            mkdir ~/quickstart-examples/terraform_outputs
            cd ~/quickstart-examples/terraform/aws/pipeline/default
            echo $(terraform output) > ~/quickstart-examples/terraform_outputs/pipeline_deployment.txt
            cat ~/quickstart-examples/terraform_outputs/pipeline_deployment.txt

      - uses: actions/upload-artifact@master
        with:
          name: quickstart-examples
          path: ~/quickstart-examples/